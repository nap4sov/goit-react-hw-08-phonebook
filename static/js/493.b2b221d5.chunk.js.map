{"version":3,"file":"static/js/493.b2b221d5.chunk.js","mappings":"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","sources":["components/ContactForm/index.jsx","components/ContactListItem/index.jsx","components/ContactList/index.jsx","components/Filter/index.jsx","components/views/PhonebookView/index.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { addContact } from 'redux/operations';\nimport { getContacts } from 'redux/selectors';\nimport { setError } from 'redux/actions';\nimport {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    Typography,\n    IconButton,\n    TextField,\n} from '@mui/material';\n\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\n\nconst ContactForm = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(getContacts);\n\n    const listContainsContact = contact => {\n        return contacts.some(\n            ({ name }) => name.toLowerCase() === contact.name.toLowerCase(),\n        );\n    };\n\n    const handleSubmit = (contact, { setSubmitting, resetForm }) => {\n        if (listContainsContact(contact)) {\n            dispatch(setError(`${contact.name} is already in contacts.`));\n            return;\n        }\n        dispatch(addContact(contact));\n        setSubmitting(false);\n        resetForm();\n    };\n\n    const ContactSchema = Yup.object().shape({\n        name: Yup.string()\n            .matches(\n                /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n                \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n            )\n            .required('Required'),\n        number: Yup.string()\n            .matches(\n                /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n                'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n            )\n            .required('Required'),\n    });\n\n    const formik = useFormik({\n        initialValues: { name: '', number: '' },\n        onSubmit: handleSubmit,\n        validationSchema: ContactSchema,\n    });\n\n    return (\n        <Accordion sx={{ background: 'transparent' }} elevation={0}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <Typography sx={{ color: 'black' }}>Add new contact</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n                <form\n                    onSubmit={formik.handleSubmit}\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n                    <TextField\n                        name=\"name\"\n                        type=\"text\"\n                        label=\"Name\"\n                        variant=\"standard\"\n                        value={formik.values.name}\n                        onChange={formik.handleChange}\n                        fullWidth\n                        error={\n                            formik.touched.name && Boolean(formik.errors.name)\n                        }\n                        helperText={formik.touched.name && formik.errors.name}\n                    />\n                    <TextField\n                        name=\"number\"\n                        type=\"tel\"\n                        label=\"Phone number\"\n                        variant=\"standard\"\n                        value={formik.values.number}\n                        onChange={formik.handleChange}\n                        sx={{ marginBottom: 3 }}\n                        fullWidth\n                        error={\n                            formik.touched.number &&\n                            Boolean(formik.errors.number)\n                        }\n                        helperText={\n                            formik.touched.number && formik.errors.number\n                        }\n                    />\n                    <IconButton\n                        variant=\"contained\"\n                        type=\"submit\"\n                        aria-label=\"add\"\n                    >\n                        <AddCircleIcon fontSize=\"large\" />\n                    </IconButton>\n                </form>\n            </AccordionDetails>\n        </Accordion>\n    );\n};\n\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport {\n    Card,\n    CardContent,\n    CardActions,\n    CardHeader,\n    Typography,\n    IconButton,\n    Link,\n    Avatar,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport PhoneIcon from '@mui/icons-material/Phone';\nimport PropTypes from 'prop-types';\n\nconst ContactListItem = ({ id, name, number }) => {\n    const dispatch = useDispatch();\n\n    const onDeleteClick = () => {\n        dispatch(deleteContact(id));\n    };\n\n    return (\n        <Card\n            sx={{\n                display: 'flex',\n                alignItems: 'center',\n                background: 'rgba(200,200,200,0.5)',\n            }}\n        >\n            <CardHeader\n                sx={{ paddingRight: 0 }}\n                avatar={<Avatar>{name[0]}</Avatar>}\n            />\n\n            <CardContent sx={{ padding: 0 }}>\n                <Typography variant=\"button\">{name}</Typography>\n                <Link\n                    href={`tel:${number}`}\n                    underline=\"hover\"\n                    color=\"text.secondary\"\n                    display=\"flex\"\n                    sx={{ alignItems: 'center' }}\n                >\n                    <PhoneIcon fontSize=\"small\" sx={{ marginRight: 0.5 }} />\n                    {number}\n                </Link>\n            </CardContent>\n            <CardActions sx={{ marginLeft: 'auto' }}>\n                <IconButton aria-label=\"delete\" onClick={onDeleteClick}>\n                    <DeleteIcon fontSize=\"medium\" />\n                </IconButton>\n            </CardActions>\n        </Card>\n    );\n};\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport ContactListItem from 'components/ContactListItem';\nimport { fetchContacts } from 'redux/operations';\nimport { getFilteredContacts, contactsIsEmpty } from 'redux/selectors';\nimport { Stack, Paper, Alert } from '@mui/material';\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    const contactsListEmpty = useSelector(contactsIsEmpty);\n    const filteredContacts = useSelector(getFilteredContacts);\n\n    if (contactsListEmpty) {\n        return (\n            <Alert variant=\"outlined\" severity=\"info\">\n                Contacts list is empty\n            </Alert>\n        );\n    }\n    if (!contactsListEmpty && filteredContacts.length === 0) {\n        return (\n            <Alert variant=\"outlined\" severity=\"warning\">\n                No contact with such name found\n            </Alert>\n        );\n    }\n\n    return (\n        <Paper\n            elevation={6}\n            sx={{\n                padding: '16px',\n                backgroundImage: `linear-gradient(270deg,\n        rgba(238, 174, 202, 0.4) 0%,\n        rgba(148, 187, 233, 0.6) 100%), url(${process.env.PUBLIC_URL}/paper.webp)`,\n            }}\n        >\n            <Stack spacing={2}>\n                {filteredContacts.map(({ id, name, number }) => (\n                    <ContactListItem\n                        key={id}\n                        id={id}\n                        name={name}\n                        number={number}\n                    />\n                ))}\n            </Stack>\n        </Paper>\n    );\n};\n\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/actions';\nimport { contactsIsEmpty } from 'redux/selectors';\nimport {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    Typography,\n    TextField,\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    const contactListEmpty = useSelector(contactsIsEmpty);\n\n    const handleInputChange = event => {\n        const value = event.target.value;\n        dispatch(filterContacts(value));\n    };\n\n    return (\n        <Accordion\n            sx={{ background: 'transparent' }}\n            elevation={0}\n            disabled={contactListEmpty ? true : false}\n        >\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <Typography sx={{ color: 'black' }}>\n                    Find contacts by name\n                </Typography>\n            </AccordionSummary>\n            <AccordionDetails sx={{ textAlign: 'center' }}>\n                <TextField\n                    onChange={handleInputChange}\n                    variant=\"standard\"\n                    label=\"Start entering name\"\n                    fullWidth\n                />\n            </AccordionDetails>\n        </Accordion>\n    );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport { Grid } from '@mui/material';\n\nconst PhonebookView = () => {\n    return (\n        <Grid container spacing={2} justifyContent=\"center\">\n            <Grid item xs={12} sm={5} md={4}>\n                <ContactForm />\n            </Grid>\n            <Grid item xs={12} sm={5} md={4}>\n                <Filter />\n            </Grid>\n            <Grid item xs={12} sm={10} md={8}>\n                <ContactList />\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default PhonebookView;\n"],"names":["dispatch","useDispatch","contacts","useSelector","getContacts","ContactSchema","Yup","shape","name","matches","required","number","formik","useFormik","initialValues","onSubmit","contact","setSubmitting","resetForm","some","toLowerCase","listContainsContact","addContact","setError","validationSchema","Accordion","sx","background","elevation","AccordionSummary","expandIcon","ExpandMore","Typography","color","AccordionDetails","handleSubmit","style","display","flexDirection","alignItems","TextField","type","label","variant","value","values","onChange","handleChange","fullWidth","error","touched","Boolean","errors","helperText","marginBottom","IconButton","AddCircle","fontSize","id","Card","CardHeader","paddingRight","avatar","Avatar","CardContent","padding","Link","href","underline","Phone","marginRight","CardActions","marginLeft","onClick","deleteContact","Delete","useEffect","fetchContacts","contactsListEmpty","contactsIsEmpty","filteredContacts","getFilteredContacts","Alert","severity","length","Paper","backgroundImage","process","Stack","spacing","map","contactListEmpty","disabled","textAlign","event","target","filterContacts","Grid","container","justifyContent","item","xs","sm","md"],"sourceRoot":""}